@page "/"

@inject IDnsManager DnsManager
@inject IDnsServersRepository DnsServers
@inject ISnackbar Snackbar

<div class="d-flex flex-column gap-5">
    <MudCard Class="d-flex gap-2 pa-5">
        <MudSelect @bind-Value="_selectedConfig" Class="flex-auto">
            @foreach (var item in _dnsOptions)
            {
                <MudSelectItem Value="item">@item.Title</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
        OnClick="BtnApplyDns_OnClick">
            Apply
        </MudButton>
    </MudCard>
</div>

@code {

    IReadOnlyList<DnsServer> _dnsOptions = [];
    DnsServer? _selectedConfig;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        _dnsOptions = await DnsServers.GetAll().ConfigureAwait(false);
        _dnsOptions = _dnsOptions.Prepend(new DnsServer("(DHCP)", [])).ToList();
    }

    void BtnApplyDns_OnClick()
    {
        if (_selectedConfig is null)
        {
            return;
        }

        if (_selectedConfig.ServerIpList.Count == 0)
        {
            DnsManager.SetDnsToDhcp();
        }
        else
        {
            DnsManager.SetDns(_selectedConfig);
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add("DNS updated: " + _selectedConfig.Title, Severity.Success);
    }
}
