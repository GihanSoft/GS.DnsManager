@page "/"

@inject IDnsService DnsService
@inject ISnackbar Snackbar

<div class="d-flex flex-column gap-5">
    <MudCard Class="d-flex gap-2 pa-5">
        <MudSelect @bind-Value="_selectedConfig" Class="flex-auto">
            @foreach (var item in _dnsOptions)
            {
                <MudSelectItem Value="item">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="BtnApplyDns_OnClick">
            Apply
        </MudButton>
    </MudCard>
</div>

@code {

    readonly DnsOption[] _dnsOptions =
    [
        new("(DHCP)", []),

        new("Shekan", ["178.22.122.100", "185.51.200.2"]),
        new("403.online", ["10.202.10.202", "10.202.10.102"]),
        new("radar.game", ["10.202.10.10", "10.202.10.11"]),

        new("Google", ["8.8.8.8", "8.8.4.4"]),
        new("1.1.1.1", ["1.1.1.1", "1.0.0.1"]),

        new("1.1.1.1 + block malware for families", ["1.1.1.2", "1.0.0.2"]),
        new("1.1.1.1 + block malware and adult content for families", ["1.1.1.3", "1.0.0.3"]),
    ];

    DnsOption? _selectedConfig;

    void BtnApplyDns_OnClick()
    {
        if (_selectedConfig is null)
        {
            return;
        }

        if (_selectedConfig.DnsArr.Length == 0)
        {
            DnsService.SetDnsToDhcp();
        }
        else
        {
            DnsService.SetDns(_selectedConfig.DnsArr);
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add("DNS updated: " + _selectedConfig.Name, Severity.Success);
    }

    private sealed record DnsOption(string Name, string[] DnsArr);

}
