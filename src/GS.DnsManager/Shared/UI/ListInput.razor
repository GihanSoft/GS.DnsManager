@typeparam T

<MudStack>
    @if (Lable is not null)
    {
        <label>
            <MudText>@Lable</MudText>
        </label>
    }
    @for (var i = 0; i < List.Count; i++)
    {
        var index = i;
        var item = List[index];
        <MudStack Row="true">
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="async () => await Add(index)"/>
            <MudInput Variant="Variant.Outlined" Value="item" Required="true"
                      ValueChanged="async (T value) => await ItemChanged(index, value)"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await Delete(index)"/>
        </MudStack>
    }

    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="@Color.Primary" Variant="Variant.Filled"
               OnClick="async () => await Add(List.Count)">Add new Item
    </MudButton>
</MudStack>

@code {

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string? Lable { get; set; }

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public IList<T> List { get; set; } = [];

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public EventCallback<IList<T>> ListChanged { get; set; }

    async Task ItemChanged(int index, T value)
    {
        List[index] = value;
        StateHasChanged();
        await ListChanged.InvokeAsync(List);
    }

    async Task Delete(int index)
    {
        List.RemoveAt(index);
        StateHasChanged();
        await ListChanged.InvokeAsync(List);
    }

    async Task Add(int index)
    {
        List.Insert(index, default!);
        StateHasChanged();
        await ListChanged.InvokeAsync(List);
    }

}
